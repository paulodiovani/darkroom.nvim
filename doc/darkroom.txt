*darkroom.txt*  A Neovim plugin that simulates a dark room by creating darkened side windows

Author:  Paulo Diovani <https://github.com/paulodiovani>
License: Same as Vim (see |license|)

==============================================================================
CONTENTS                                             *darkroom-contents*

    1. Introduction ................................. |darkroom-introduction|
    2. Usage ........................................ |darkroom-usage|
    3. Configuration ............................... |darkroom-configuration|
         3.1. Basic Configuration ................... |darkroom-basic-configuration|
         3.2. Edgy.nvim Configuration ............... |darkroom-edgy-configuration|
         3.3. Recommended Vim Settings .............. |darkroom-recommended-settings|
    4. Commands .................................... |darkroom-commands|
    5. Mappings .................................... |darkroom-mappings|
    6. About ....................................... |darkroom-about|

==============================================================================
1. INTRODUCTION                                     *darkroom-introduction*

DarkRoom is a Neovim plugin that simulates a dark room by creating darkened side 
windows, keeping your focus on the centered window.

Features:
  Uses edgy.nvim for intelligent window management

==============================================================================
2. USAGE                                            *darkroom-usage*

Toggle DarkRoom mode with either:
    - `:DarkRoomToggle` command
    - `<Leader><BS>` (default mapping)

When enabled, DarkRoom creates two darkened side panels and centers your text
in the middle of the screen. Toggle it again to return to normal editing view.

You can also run commands in the side panels:
    - `:DarkRoomLeft [cmd]` (run command in left darkroom window)
    - `:DarkRoomRight [cmd]` (run command in right darkroom window)
    - `:DarkRoomReplaceLeft [cmd]` (replace left darkroom window with command)
    - `:DarkRoomReplaceRight [cmd]` (replace right darkroom window with command)

This allows you to use the side panels for displaying file explorers, terminals,
help pages, or any other Vim window while maintaining your focused writing area.

==============================================================================
3. CONFIGURATION                                    *darkroom-configuration*

3.1 BASIC CONFIGURATION                             *darkroom-basic-configuration*

Add the following settings to your `init.lua` to customize the plugin's
behavior. Default values are shown below.
>lua
  require('darkroom').setup({
    -- Percent to darken the background color in side windows (0-100)
    darken_percent = 25,
    
    -- Minimum number of columns for the main/center window
    min_columns = 130,
    
    -- Left window options
    left = {
      filetype = "darkroomleft", -- darkroom window filetype
      additional_filetypes = {   -- additional filetypes to use darkroom
        -- Add any filetypes you want to be handled as darkroom left windows
      },
    },
    
    -- Right window options
    right = {
      filetype = "darkroomright", -- darkroom window filetype
      additional_filetypes = {    -- additional filetypes to use darkroom
        -- Add any filetypes you want to be handled as darkroom right windows
      },
    },
    
    -- Window options used in darkroom left/right windows
    wo = {
      -- do not show winbar
      winbar = false,
      -- window highlight used by darkroom
      winhighlight = "Normal:DarkRoomNormal,NormalNC:DarkRoomNormal,EndOfBuffer:DarkRoomNormal"
    },
    
    -- Setup edgy.nvim automatically
    -- set to false if you want to configure edgy yourself
    setup_edgy = true
  })
<
3.2 USING CUSTOM EDGY.NVIM CONFIGURATION        *darkroom-edgy-configuration*

If you prefer to configure edgy.nvim yourself, set `setup_edgy = false` in your setup:
>lua
  require('darkroom').setup({
    -- Your darkroom configuration...
    setup_edgy = false
  })
  
  -- Then configure edgy separately, including darkroom configuration
  require('edgy').setup({
    -- Your edgy configuration...
    left = {
      -- Include darkroom windows in your edgy config
      {
        ft = "darkroomleft",
        size = { width = function() return require('darkroom').get_darkroom_width() end },
        wo = {
          winbar = false,
          winhighlight = "Normal:DarkRoomNormal,NormalNC:DarkRoomNormal,EndOfBuffer:DarkRoomNormal"
        },
        -- your edgy options...
      },
      -- Other left windows...
    },
    right = {
      -- Include darkroom windows in your edgy config
      {
        ft = "darkroomright", 
        size = { width = function() return require('darkroom').get_darkroom_width() end },
        wo = {
          winbar = false,
          winhighlight = "Normal:DarkRoomNormal,NormalNC:DarkRoomNormal,EndOfBuffer:DarkRoomNormal"
        },
        -- your edgy options...
      },
      -- Other right windows...
    }
  })
<

3.3 RECOMMENDED VIM SETTINGS                       *darkroom-recommended-settings*

For optimal DarkRoom behavior, it's recommended to disable the 'equalalways' 
option in your Neovim configuration:
>
    vim.opt.equalalways = false
<
This prevents Vim from automatically equalizing window sizes when
DarkRoom is active.

You might also want to remove the vertical window separator:
>
    vim.opt.fillchars:append({ vert = ' ' })
<

==============================================================================
4. COMMANDS                                         *darkroom-commands*

*:DarkRoomToggle*
    Toggle DarkRoom mode on/off.

*:DarkRoomLeft* {cmd}
    Run a Vim command in the left darkroom window.
    Example: `:DarkRoomLeft Explore`

*:DarkRoomRight* {cmd}
    Run a Vim command in the right darkroom window.
    Example: `:DarkRoomRight help darkroom`

*:DarkRoomReplaceLeft* {cmd}
    Replace the left darkroom window with a Vim command.
    Example: `:DarkRoomReplaceLeft terminal`

*:DarkRoomReplaceRight* {cmd}
    Replace the right darkroom window with a Vim command.
    Example: `:DarkRoomReplaceRight Gstatus`

==============================================================================
5. MAPPINGS                                         *darkroom-mappings*

<Leader><BS>                                        *<Leader><BS>*
    Default mapping to toggle DarkRoom mode.

<Plug>DarkRoomToggle                              *<Plug>DarkRoomToggle*
    Mapping to toggle DarkRoom mode. Can be remapped to a custom key.
    Example: >
        nmap <silent> <F8> <Plug>DarkRoomToggle
<

==============================================================================
6. ABOUT                                            *darkroom-about*

This plugin is maintained by Paulo Diovani <https://github.com/paulodiovani>.
Report issues or contribute at https://github.com/paulodiovani/darkroom.nvim

 vim:tw=78:ts=8:ft=help:norl:
